/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CarouselField = {
  _type: 'carouselField';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  caption?: string;
};

export type DynamicIntro = {
  _type: 'dynamicIntro';
  eyebrow?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
        listItem?: 'number' | 'bullet' | 'check';
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: 'customLink';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type ImageCarousel = {
  _type: 'imageCarousel';
  eyebrow?: string;
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
        listItem?: 'number' | 'bullet' | 'check';
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: 'customLink';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
  carousel?: Array<
    {
      _key: string;
    } & CarouselField
  >;
};

export type SplitForm = {
  _type: 'splitForm';
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
        listItem?: 'number' | 'bullet' | 'check';
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: 'customLink';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  form?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'form';
  };
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Cta = {
  _type: 'cta';
  title?: string;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
        listItem?: 'number' | 'bullet' | 'check';
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: 'customLink';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type Hero = {
  _type: 'hero';
  title?: string;
  isTitleH1?: boolean;
  richText?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
        listItem?: 'number' | 'bullet' | 'check';
        markDefs?: Array<{
          customLink?: CustomUrl;
          _type: 'customLink';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type FormFields = {
  _type: 'formFields';
  fields?: Array<
    {
      _key: string;
    } & FormField
  >;
};

export type FormField = {
  _type: 'formField';
  required?: boolean;
  fieldName?: string;
  placeholder?: string;
  fieldId?: string;
  inputType?: 'text' | 'email' | 'phone' | 'textArea' | 'file' | 'checkbox';
  checkboxFields?: {
    checkboxTitle?: string;
    items?: Array<{
      required?: boolean;
      label?: string;
      description?: string;
      value?: string;
      _key: string;
    }>;
  };
};

export type RichText = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline';
      listItem?: 'number' | 'bullet' | 'check';
      markDefs?: Array<{
        customLink?: CustomUrl;
        _type: 'customLink';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type NavDropdownColumn = {
  _type: 'navDropdownColumn';
  title?: string;
  columns?: Array<
    {
      _key: string;
    } & NavLinkColumn
  >;
};

export type NavLinkColumn = {
  _type: 'navLinkColumn';
  title?: string;
  icon?: IconPicker;
  description?: string;
  url?: CustomUrl;
};

export type Button = {
  _type: 'button';
  variant?: 'default' | 'secondary' | 'outline' | 'link';
  icon?: IconPicker;
  buttonText?: string;
  url?: CustomUrl;
};

export type NavLink = {
  _type: 'navLink';
  title?: string;
  url?: CustomUrl;
};

export type PageBuilder = Array<
  | ({
      _key: string;
    } & Hero)
  | ({
      _key: string;
    } & Cta)
  | ({
      _key: string;
    } & SplitForm)
  | ({
      _key: string;
    } & ImageCarousel)
  | ({
      _key: string;
    } & DynamicIntro)
>;

export type Footer = {
  _id: string;
  _type: 'footer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  links?: Array<
    {
      _key: string;
    } & NavLink
  >;
};

export type Logo = {
  _id: string;
  _type: 'logo';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Navbar = {
  _id: string;
  _type: 'navbar';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  links?: Array<
    | ({
        _key: string;
      } & NavLink)
    | ({
        _key: string;
      } & NavDropdownColumn)
  >;
  buttons?: Array<
    {
      _key: string;
    } & Button
  >;
};

export type Form = {
  _id: string;
  _type: 'form';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  title?: string;
  formId?: string;
  language?: string;
  fields?: Array<
    {
      _key: string;
    } & FormField
  >;
  buttonText?: string;
};

export type TranslationMetadata = {
  _id: string;
  _type: 'translation.metadata';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue';
  value?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'blog';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'mainPage';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'blogIndex';
      };
};

export type BlogIndex = {
  _id: string;
  _type: 'blogIndex';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  language?: string;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  cardTitle?: string;
  cardDescription?: string;
  cardImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type MainPage = {
  _id: string;
  _type: 'mainPage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  pageBuilder?: PageBuilder;
  language?: string;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  cardTitle?: string;
  cardDescription?: string;
  cardImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  richText?: RichText;
  language?: string;
  pageBuilder?: PageBuilder;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  cardTitle?: string;
  cardDescription?: string;
  cardImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  slug?: Slug;
  pageBuilder?: PageBuilder;
  language?: string;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  cardTitle?: string;
  cardDescription?: string;
  cardImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type CustomUrl = {
  _type: 'customUrl';
  type?: 'internal' | 'external';
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internal?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'blogIndex';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'blog';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'mainPage';
      };
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type IconPicker = {
  _type: 'iconPicker';
  provider?: string;
  name?: string;
  svg?: string;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask';
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status';
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations';
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type';
  type?: string;
};

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field';
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context';
  reference?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context';
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: 'assist.instruction.context';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput';
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: 'normal';
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef';
  path?: string;
};

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction';
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field';
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | CarouselField
  | DynamicIntro
  | ImageCarousel
  | SplitForm
  | Cta
  | Hero
  | FormFields
  | FormField
  | RichText
  | NavDropdownColumn
  | NavLinkColumn
  | Button
  | NavLink
  | PageBuilder
  | Footer
  | Logo
  | Navbar
  | Form
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | BlogIndex
  | MainPage
  | Blog
  | Page
  | CustomUrl
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | InternationalizedArrayReference
  | IconPicker
  | MediaTag
  | Slug
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/src/lib/sanity/query.ts
// Variable: getAllSlugPagePathsQuery
// Query: *[_type == "page" && defined(slug.current) && !seoNoIndex]{  "slug":slug.current,  "locale":language}
export type GetAllSlugPagePathsQueryResult = Array<{
  slug: string | null;
  locale: string | null;
}>;
// Variable: getAllMainPageTranslationsQuery
// Query: *[_type == "mainPage"].language
export type GetAllMainPageTranslationsQueryResult = Array<string | null>;
// Variable: getBlogIndexDataQuery
// Query: {    "seo":*[_type == "blogIndex" && select(($locale == 'en-GB' || $locale == '' ) =>   (!defined(language) || language == 'en-GB'), language == $locale => language == $locale)][0]{        ...,    },    "blogs":*[_type == "blog" && select(($locale == 'en-GB' || $locale == '' ) =>   (!defined(language) || language == 'en-GB'), language == $locale => language == $locale)]{      _id,      "title":coalesce(cardTitle,title),"description":coalesce(cardDescription,description),"image":coalesce(cardImage,image),      "slug":slug.current    }}
export type GetBlogIndexDataQueryResult = {
  seo: {
    _id: string;
    _type: 'blogIndex';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    slug?: Slug;
    language?: string;
    seoTitle?: string;
    seoDescription?: string;
    seoImage?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    seoNoIndex?: boolean;
    seoHideFromLists?: boolean;
    ogTitle?: string;
    ogDescription?: string;
    cardTitle?: string;
    cardDescription?: string;
    cardImage?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
  } | null;
  blogs: Array<{
    _id: string;
    title: string | null;
    description: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    slug: string | null;
  }>;
};
// Variable: getAllBlogIndexTranslationsQuery
// Query: *[_type == "blogIndex"].language
export type GetAllBlogIndexTranslationsQueryResult = Array<string | null>;
// Variable: getAllBlogsPathsQuery
// Query: *[_type == "blog" && defined(slug.current) && !seoNoIndex]{  "slug":slug.current,  "locale":language}
export type GetAllBlogsPathsQueryResult = Array<{
  slug: string | null;
  locale: string | null;
}>;
// Variable: getFooterDataQuery
// Query: *[_type == "footer"][0]{    _id,    title,      links[]{    ...,    title,    _type,      url{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  },    defined(columns)=>{  columns[]{    ...,    title,    description,    defined(icon)=>{  icon{    svg  }},      url{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  }  }}  },    "logo":*[_type == "logo"][0].image.asset->url}
export type GetFooterDataQueryResult = {
  _id: string;
  title: string | null;
  links: Array<
    | {
        _key: string;
        _type: 'navLink';
        title: string | null;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
        columns: null;
      }
    | {
        _key: string;
        _type: 'navLink';
        title: string | null;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
      }
  > | null;
  logo: string | null;
} | null;
// Variable: getNavbarDataQuery
// Query: *[_type == "navbar"][0]{    _id,    title,      links[]{    ...,    title,    _type,      url{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  },    defined(columns)=>{  columns[]{    ...,    title,    description,    defined(icon)=>{  icon{    svg  }},      url{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  }  }}  },      buttons[]{    ...,      url{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  },    defined(icon)=>{  icon{    svg  }}  },    "logo":*[_type == "logo"][0].image.asset->url  }
export type GetNavbarDataQueryResult = {
  _id: string;
  title: string | null;
  links: Array<
    | {
        _key: string;
        _type: 'navDropdownColumn';
        title: string | null;
        columns?: Array<
          {
            _key: string;
          } & NavLinkColumn
        >;
        url: null;
      }
    | {
        _key: string;
        _type: 'navDropdownColumn';
        title: string | null;
        columns: Array<
          | {
              _key: string;
              _type: 'navLinkColumn';
              title: string | null;
              icon?: IconPicker;
              description: string | null;
              url: {
                openInNewTab: boolean | null;
                href: string | '#' | null;
              } | null;
            }
          | {
              _key: string;
              _type: 'navLinkColumn';
              title: string | null;
              icon: {
                svg: string | null;
              } | null;
              description: string | null;
              url: {
                openInNewTab: boolean | null;
                href: string | '#' | null;
              } | null;
            }
        > | null;
        url: null;
      }
    | {
        _key: string;
        _type: 'navLink';
        title: string | null;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
        columns: null;
      }
    | {
        _key: string;
        _type: 'navLink';
        title: string | null;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
      }
  > | null;
  buttons: Array<
    | {
        _key: string;
        _type: 'button';
        variant?: 'default' | 'link' | 'outline' | 'secondary';
        icon?: IconPicker;
        buttonText?: string;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
      }
    | {
        _key: string;
        _type: 'button';
        variant?: 'default' | 'link' | 'outline' | 'secondary';
        icon: {
          svg: string | null;
        } | null;
        buttonText?: string;
        url: {
          openInNewTab: boolean | null;
          href: string | '#' | null;
        } | null;
      }
  > | null;
  logo: string | null;
} | null;
// Variable: getBlogPageDataQuery
// Query: *[_type == "blog" && slug.current == $slug && select(($locale == 'en-GB' || $locale == '' ) =>   (!defined(language) || language == 'en-GB'), language == $locale => language == $locale)][0]{    ...,    defined(richText)=>{  richText[]{    ...,     defined(markDefs)=>{  markDefs[]{    ...,    defined(customLink)=>{  customLink{    openInNewTab,    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),  }}     }}     }}  }
export type GetBlogPageDataQueryResult =
  | {
      _id: string;
      _type: 'blog';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      description?: string;
      slug?: Slug;
      image?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      richText?: RichText;
      language?: string;
      pageBuilder?: PageBuilder;
      seoTitle?: string;
      seoDescription?: string;
      seoImage?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      seoNoIndex?: boolean;
      seoHideFromLists?: boolean;
      ogTitle?: string;
      ogDescription?: string;
      cardTitle?: string;
      cardDescription?: string;
      cardImage?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
    }
  | {
      _id: string;
      _type: 'blog';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      description?: string;
      slug?: Slug;
      image?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      richText: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
            listItem?: 'bullet' | 'check' | 'number';
            markDefs?: Array<{
              customLink?: CustomUrl;
              _type: 'customLink';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
            listItem?: 'bullet' | 'check' | 'number';
            markDefs: Array<
              | {
                  customLink?: CustomUrl;
                  _type: 'customLink';
                  _key: string;
                }
              | {
                  customLink: {
                    openInNewTab: boolean | null;
                    href: string | '#' | null;
                  } | null;
                  _type: 'customLink';
                  _key: string;
                }
            > | null;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            caption?: string;
            alt?: string;
            _type: 'image';
            _key: string;
            markDefs: null;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            caption?: string;
            alt?: string;
            _type: 'image';
            _key: string;
          }
      > | null;
      language?: string;
      pageBuilder?: PageBuilder;
      seoTitle?: string;
      seoDescription?: string;
      seoImage?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      seoNoIndex?: boolean;
      seoHideFromLists?: boolean;
      ogTitle?: string;
      ogDescription?: string;
      cardTitle?: string;
      cardDescription?: string;
      cardImage?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
    }
  | null;
// Variable: getMainPageDataQuery
// Query: *[_type == "mainPage" && select(($locale == 'en-GB' || $locale == '' ) =>   (!defined(language) || language == 'en-GB'), language == $locale => language == $locale)][0]{  _id,  _type,  title,  description,    pageBuilder[]{    ...,    _type,  }}
export type GetMainPageDataQueryResult = {
  _id: string;
  _type: 'mainPage';
  title: string | null;
  description: string | null;
  pageBuilder: Array<
    | {
        _key: string;
        _type: 'cta';
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'dynamicIntro';
        eyebrow?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'hero';
        title?: string;
        isTitleH1?: boolean;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'imageCarousel';
        eyebrow?: string;
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
        carousel?: Array<
          {
            _key: string;
          } & CarouselField
        >;
      }
    | {
        _key: string;
        _type: 'splitForm';
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        form?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'form';
        };
        image?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
      }
  > | null;
} | null;
// Variable: getSlugPageDataQuery
// Query: *[_type == "page" && slug.current == $slug ][0]{    _id,    _type,    title,    content,    "slug":slug.current,      pageBuilder[]{    ...,    _type,  }    }
export type GetSlugPageDataQueryResult = {
  _id: string;
  _type: 'page';
  title: string | null;
  content: null;
  slug: string | null;
  pageBuilder: Array<
    | {
        _key: string;
        _type: 'cta';
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'dynamicIntro';
        eyebrow?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'hero';
        title?: string;
        isTitleH1?: boolean;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
      }
    | {
        _key: string;
        _type: 'imageCarousel';
        eyebrow?: string;
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        buttons?: Array<
          {
            _key: string;
          } & Button
        >;
        carousel?: Array<
          {
            _key: string;
          } & CarouselField
        >;
      }
    | {
        _key: string;
        _type: 'splitForm';
        title?: string;
        richText?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'inline' | 'normal';
              listItem?: 'bullet' | 'check' | 'number';
              markDefs?: Array<{
                customLink?: CustomUrl;
                _type: 'customLink';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              caption?: string;
              alt?: string;
              _type: 'image';
              _key: string;
            }
        >;
        form?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'form';
        };
        image?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
      }
  > | null;
} | null;
// Variable: getOGDataQuery
// Query: *[_id == $id][0]{    _id,    "title":coalesce(ogTitle,title),    "description":coalesce(ogDescription,description),    "image":coalesce(seoImage,image,*[_type =="logo"][0].image).asset->url}
export type GetOGDataQueryResult =
  | {
      _id: string;
      title: null;
      description: null;
      image: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null;
      image: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null | string;
      image: null | string;
    }
  | {
      _id: string;
      title: string | null;
      description: string | null;
      image: string | null;
    }
  | null;
// Variable: genericPageQueryOG
// Query: *[_id == $id && defined(slug.current)][0]{    _id,  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",    "dominantColor":image.asset->metadata.palette.dominant.background,  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "logo":*[_type =="logo"][0].image.asset->url,  _type,  "date":coalesce(date,_createdAt)}
export type GenericPageQueryOGResult =
  | {
      _id: string;
      title: null | string;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'assist.instruction.context';
      date: null | string;
    }
  | {
      _id: string;
      title: string | null;
      description: string | null;
      image: string | null;
      dominantColor: string | null;
      seoImage: string | null;
      logo: string | null;
      _type: 'blog';
      date: null | string;
    }
  | {
      _id: string;
      title: string | null;
      description: string | null;
      image: null;
      dominantColor: null;
      seoImage: string | null;
      logo: string | null;
      _type: 'blogIndex';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'footer';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'form';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null;
      image: string | null;
      dominantColor: string | null;
      seoImage: null;
      logo: string | null;
      _type: 'logo';
      date: null | string;
    }
  | {
      _id: string;
      title: string | null;
      description: string | null;
      image: null;
      dominantColor: null;
      seoImage: string | null;
      logo: string | null;
      _type: 'mainPage';
      date: null | string;
    }
  | {
      _id: string;
      title: null;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'media.tag';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'navbar';
      date: null | string;
    }
  | {
      _id: string;
      title: string | null;
      description: string | null;
      image: string | null;
      dominantColor: string | null;
      seoImage: string | null;
      logo: string | null;
      _type: 'page';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null | string;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'sanity.fileAsset';
      date: null | string;
    }
  | {
      _id: string;
      title: null | string;
      description: null | string;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'sanity.imageAsset';
      date: null | string;
    }
  | {
      _id: string;
      title: null;
      description: null;
      image: null;
      dominantColor: null;
      seoImage: null;
      logo: string | null;
      _type: 'translation.metadata';
      date: null | string;
    }
  | null;
// Variable: slugPageQueryOG
// Query: *[_type == "page" && _id == $id][0]{    _id,  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",    "dominantColor":image.asset->metadata.palette.dominant.background,  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "logo":*[_type =="logo"][0].image.asset->url,  _type,  "date":coalesce(date,_createdAt)}
export type SlugPageQueryOGResult = {
  _id: string;
  title: string | null;
  description: string | null;
  image: string | null;
  dominantColor: string | null;
  seoImage: string | null;
  logo: string | null;
  _type: 'page';
  date: null | string;
} | null;
// Variable: blogPageQueryOG
// Query: *[_type == "blog" && _id == $id][0]{    _id,  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",    "dominantColor":image.asset->metadata.palette.dominant.background,  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "logo":*[_type =="logo"][0].image.asset->url,  _type,  "date":coalesce(date,_createdAt)}
export type BlogPageQueryOGResult = {
  _id: string;
  title: string | null;
  description: string | null;
  image: string | null;
  dominantColor: string | null;
  seoImage: string | null;
  logo: string | null;
  _type: 'blog';
  date: null | string;
} | null;
// Variable: mainPageQueryOG
// Query: *[_type == "mainPage"][0]{    _id,  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",    "dominantColor":image.asset->metadata.palette.dominant.background,  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",  "logo":*[_type =="logo"][0].image.asset->url,  _type,  "date":coalesce(date,_createdAt)}
export type MainPageQueryOGResult = {
  _id: string;
  title: string | null;
  description: string | null;
  image: null;
  dominantColor: null;
  seoImage: string | null;
  logo: string | null;
  _type: 'mainPage';
  date: null | string;
} | null;
// Variable: sitemapQuery
// Query: *[_type in $types && defined(slug.current) && seoNoIndex != true ]{  "slug":slug.current,  _updatedAt,  _type,  _id}
export type SitemapQueryResult = Array<
  | {
      slug: null;
      _updatedAt: string;
      _type: 'assist.instruction.context';
      _id: string;
    }
  | {
      slug: string | null;
      _updatedAt: string;
      _type: 'blog';
      _id: string;
    }
  | {
      slug: string | null;
      _updatedAt: string;
      _type: 'blogIndex';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'footer';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'form';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'logo';
      _id: string;
    }
  | {
      slug: string | null;
      _updatedAt: string;
      _type: 'mainPage';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'media.tag';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'navbar';
      _id: string;
    }
  | {
      slug: string | null;
      _updatedAt: string;
      _type: 'page';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'sanity.fileAsset';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'sanity.imageAsset';
      _id: string;
    }
  | {
      slug: null;
      _updatedAt: string;
      _type: 'translation.metadata';
      _id: string;
    }
>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n*[_type == "page" && defined(slug.current) && !seoNoIndex]{\n  "slug":slug.current,\n  "locale":language\n}\n': GetAllSlugPagePathsQueryResult;
    '\n*[_type == "mainPage"].language\n': GetAllMainPageTranslationsQueryResult;
    '\n{\n    "seo":*[_type == "blogIndex" && select(($locale == \'en-GB\' || $locale == \'\' ) => \n  (!defined(language) || language == \'en-GB\'), language == $locale => language == $locale)][0]{\n        ...,\n    },\n    "blogs":*[_type == "blog" && select(($locale == \'en-GB\' || $locale == \'\' ) => \n  (!defined(language) || language == \'en-GB\'), language == $locale => language == $locale)]{\n      _id,\n      \n"title":coalesce(cardTitle,title),\n"description":coalesce(cardDescription,description),\n"image":coalesce(cardImage,image)\n,\n      "slug":slug.current\n    }\n}\n': GetBlogIndexDataQueryResult;
    '\n*[_type == "blogIndex"].language\n': GetAllBlogIndexTranslationsQueryResult;
    '\n*[_type == "blog" && defined(slug.current) && !seoNoIndex]{\n  "slug":slug.current,\n  "locale":language\n}\n': GetAllBlogsPathsQueryResult;
    '\n*[_type == "footer"][0]{\n    _id,\n    title,\n    \n  links[]{\n    ...,\n    title,\n    _type,\n    \n  url{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n,\n    defined(columns)=>{\n  columns[]{\n    ...,\n    title,\n    description,\n    defined(icon)=>{\n  icon{\n    svg\n  }\n},\n    \n  url{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n\n  }\n}\n  }\n,\n    "logo":*[_type == "logo"][0].image.asset->url\n}\n': GetFooterDataQueryResult;
    '\n*[_type == "navbar"][0]{\n    _id,\n    title,\n    \n  links[]{\n    ...,\n    title,\n    _type,\n    \n  url{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n,\n    defined(columns)=>{\n  columns[]{\n    ...,\n    title,\n    description,\n    defined(icon)=>{\n  icon{\n    svg\n  }\n},\n    \n  url{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n\n  }\n}\n  }\n,\n    \n  buttons[]{\n    ...,\n    \n  url{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n,\n    defined(icon)=>{\n  icon{\n    svg\n  }\n}\n  }\n,\n    "logo":*[_type == "logo"][0].image.asset->url\n  }\n  ': GetNavbarDataQueryResult;
    '\n*[_type == "blog" && slug.current == $slug && select(($locale == \'en-GB\' || $locale == \'\' ) => \n  (!defined(language) || language == \'en-GB\'), language == $locale => language == $locale)][0]{\n    ...,\n    defined(richText)=>{\n  richText[]{\n    ...,\n     defined(markDefs)=>{\n  markDefs[]{\n    ...,\n    defined(customLink)=>{\n  customLink{\n    openInNewTab,\n    "href": select(type == "internal"=>internal->slug.current, type == "external" => external,"#"),\n  }\n}   \n  }\n}\n   \n  }\n}\n  }\n  ': GetBlogPageDataQueryResult;
    "\n*[_type == \"mainPage\" && select(($locale == 'en-GB' || $locale == '' ) => \n  (!defined(language) || language == 'en-GB'), language == $locale => language == $locale)][0]{\n  _id,\n  _type,\n  title,\n  description,\n  \n  pageBuilder[]{\n    ...,\n    _type,\n  }\n\n}\n": GetMainPageDataQueryResult;
    '\n*[_type == "page" && slug.current == $slug ][0]{\n    _id,\n    _type,\n    title,\n    content,\n    "slug":slug.current,\n    \n  pageBuilder[]{\n    ...,\n    _type,\n  }\n\n    \n}\n': GetSlugPageDataQueryResult;
    '\n*[_id == $id][0]{\n    _id,\n    "title":coalesce(ogTitle,title),\n    "description":coalesce(ogDescription,description),\n    "image":coalesce(seoImage,image,*[_type =="logo"][0].image).asset->url\n}\n': GetOGDataQueryResult;
    '\n*[_id == $id && defined(slug.current)][0]{\n  \n  _id,\n  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),\n  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),\n  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",  \n  "dominantColor":image.asset->metadata.palette.dominant.background,\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "logo":*[_type =="logo"][0].image.asset->url,\n  _type,\n  "date":coalesce(date,_createdAt)\n\n}\n': GenericPageQueryOGResult;
    '\n*[_type == "page" && _id == $id][0]{\n  \n  _id,\n  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),\n  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),\n  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",  \n  "dominantColor":image.asset->metadata.palette.dominant.background,\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "logo":*[_type =="logo"][0].image.asset->url,\n  _type,\n  "date":coalesce(date,_createdAt)\n\n}\n': SlugPageQueryOGResult;
    '\n*[_type == "blog" && _id == $id][0]{\n  \n  _id,\n  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),\n  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),\n  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",  \n  "dominantColor":image.asset->metadata.palette.dominant.background,\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "logo":*[_type =="logo"][0].image.asset->url,\n  _type,\n  "date":coalesce(date,_createdAt)\n\n}\n': BlogPageQueryOGResult;
    '\n*[_type == "mainPage"][0]{\n  \n  _id,\n  "title":select(defined(ogTitle)=>ogTitle,defined(seoTitle)=>seoTitle,title),\n  "description":select(defined(ogDescription)=>ogDescription,defined(seoDescription)=>seoDescription,description),\n  "image": image.asset->url + "?w=566&h=566&dpr=2&fit=max",  \n  "dominantColor":image.asset->metadata.palette.dominant.background,\n  "seoImage": seoImage.asset->url + "?w=1200&h=630&dpr=2&fit=max",\n  "logo":*[_type =="logo"][0].image.asset->url,\n  _type,\n  "date":coalesce(date,_createdAt)\n\n}\n': MainPageQueryOGResult;
    '\n*[_type in $types && defined(slug.current) && seoNoIndex != true ]{\n  "slug":slug.current,\n  _updatedAt,\n  _type,\n  _id\n}': SitemapQueryResult;
  }
}
